<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Event;
use App\Models\Guests;
use Illuminate\Support\Facades\DB;
class EventController extends Controller
{
    //Add a method to fetch all events
    public function index()
{
    // Fetch all events
    $events = Event::all();

    // Return the events as a JSON response
    return response()->json($events);
}
    // public function index(){
    //     try {
    //         $events = Event::all(); //retrieve all events
    //         return response()->json($packages, 200); //return with 200 status
    //     } catch (\Exception $e) {
    //         return response()->json([
    //             'status' => 'error',
    //             'message' => $e->getMessage(),
    //         ], 500);
    //     }
    // }

    // function to add events
 // Store a new event with package
 public function store(Request $request)
 {
     DB::beginTransaction();

     try {
         $validatedData = $request->validate([
             'eventName' => 'required|string|max:255',
             'eventType' => 'required|string',
             'eventPax' => 'required|numeric|min:1',
             'eventDate' => 'required|date', 
             'eventTime' => 'required|date_format:H:i',
             'eventStatus' => 'required|string', #TODO: apply date/form validation and all event status must be known,  (Tentative, Awaiting Confirmation/Pending, Booked, Scheduled, In progress, Completed, PostPoned, Cancelled, On hold, Failed )
             'eventLocation' => 'required|string',
             'description' => 'required|string',
             'coverPhoto' => 'required|url',
             'package_id' => 'required|exists:packages,id',
             'guests' => 'required|array',
             'guests.*.GuestName' => 'required|string|max:255',
             'guests.*.email' => 'required|email',
             'guests.*.phone' => 'required|string|max:15'
         ]);

         // Create the event with package association
         $event = Event::create([
             'name' => $validatedData['eventName'],
             'type' => $validatedData['eventType'],
             'pax' => $validatedData['eventPax'],
             'date' => $validatedData['eventDate'],
             'time' => $validatedData['eventTime'],
             'status' => $validatedData['eventStatus'],
             'location' => $validatedData['eventLocation'],
             'description' => $validatedData['description'],
             'cover_photo' => $validatedData['coverPhoto'],
             'package_id' => $validatedData['package_id']
         ]);

         // Add guests to the event
         foreach ($validatedData['guests'] as $guestData) {
             Guests::create([
                 'event_id' => $event->id,
                 'GuestName' => $guestData['GuestName'],
                 'email' => $guestData['email'],
                 'phone' => $guestData['phone']
             ]);
         }

         DB::commit();
         return response()->json($event->load('package'), 201); // Include package in response

     } catch (\Illuminate\Validation\ValidationException $e) {
         DB::rollBack();
         return response()->json([
             'status' => 'error',
             'message' => 'Validation failed.',
             'errors' => $e->errors(),
         ], 422);
     } catch (\Exception $e) {
         DB::rollBack();
         return response()->json([
             'status' => 'error',
             'message' => $e->getMessage(),
         ], 500);
     }
 }

    public function updateEvent(Request $request, $eventId)
{
    DB::beginTransaction();

    try {
        $event = Event::find($eventId);

        if (!$event) {
            return response()->json(['error' => 'Event not found'], 404);
        }

        $validatedData = $request->validate([
            'status' => 'required|string',
        ]);

        $event->update($validatedData);

        DB::commit();

        return response()->json(['message' => 'Event status updated successfully'], 200);

    } catch (\Illuminate\Validation\ValidationException $e) {
        DB::rollBack();
        return response()->json([
            'status' => 'error',
            'message' => 'Validation failed.',
            'errors' => $e->errors(),
        ], 422);
    } catch (\Exception $e) {
        DB::rollBack();
        return response()->json([
            'status' => 'error',
            'message' => $e->getMessage(),
        ], 500);
    }
}
    

    
}
//     public function store(Request $request)
// {
//     // Validate the request data
//     $validatedData = $request->validate([
//         'eventName' => 'required|string',
//         'eventType' => 'required|string',
//         'eventDate' => 'required|date',
//         'eventTime' => 'required|date',
//         'eventLocation' => 'required|string',
//         'description' => 'required|string',
//         'coverPhoto' => 'required|url',
//     ]);

//     // Create a new event
//     $event = new Event();
//     $event->name = $validatedData['eventName'];
//     $event->type = $validatedData['eventType'];
//     $event->date = $validatedData['eventDate'];
//     $event->time = $validatedData['eventTime'];
//     $event->location = $validatedData['eventLocation'];
//     $event->description = $validatedData['description'];
//     $event->cover_photo = $validatedData['coverPhoto'];

//     // Save the event
//     $event->save();

//     // Return a success response
//     return response()->json(['message' => 'Event created successfully'], 201);
// }
    // public function store(Request $request){
    //     DB::beginTransaction();

    //     try {
    //         $validatedData = $request->validate([
    //             'eventName' => 'required|string|max:255',
    //             'eventType' => 'required|string',
    //             'eventDate' => 'required|date',
    //             'eventCreatedDate' => 'required|date',
    //         ]);

    //         // Create the event in the database
    //         $event = Event::create($validatedData);

    //         DB::commit();

    //         return response()->json($event, 201); // Return the created package with 201 status

    //     } catch (\Illuminate\Validation\ValidationException $e) {
    //         DB::rollBack();
    //         // Handle validation errors
    //         return response()->json([
    //             'status' => 'error',
    //             'message' => 'Validation failed.',
    //             'errors' => $e->errors(),
    //         ], 422);
    //     } catch (\Throwable $th) {
    //         DB::rollBack();
    //         return response()->json([
    //             'status' => 'error',
    //             'message' => $th->getMessage(),
    //         ], 500);
    //     }
    // }

 
